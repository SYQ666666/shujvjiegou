#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define OK 1
#define ERROR 0
#define OVERFLOW -2

typedef int Status; // Status 是函数返回值类型，其值是函数结果状态代码。
typedef int ElemType; // ElemType 为可定义的数据类型，此设为 int 类型

#define MAXSIZE 100 // 顺序表可能达到的最大长度

typedef struct {
    int id; // ISBN
    char name[50]; // 书名
    double price; // 定价
} Book;

typedef struct {
    Book *elem; // 存储空间的基地址
    int length; // 当前长度
} SqList;

Status InitList_Sq(SqList *L) { // 算法2.1 顺序表的初始化
    // 构造一个空的顺序表 L
    L->elem = (Book *)malloc(MAXSIZE * sizeof(Book)); //
    if (L->elem == NULL) {
        printf("内存分配失败！\n");
        return OVERFLOW;
    }
    L->length = 0;
    return OK;
}

Status GetElem(SqList L, int i, Book *e) { // 算法2.2 顺序表的取值
    if (i < 1 || i > L.length) return ERROR;
    *e = L.elem[i - 1];
    return OK;
}

int LocateElem_Sq(SqList L, double e) { // 算法2.3 顺序表的查找
    // 顺序表的查找
    int i;
    for (i = 0; i < L.length; i++)
        if (L.elem[i].price == e) return i + 1;
    return 0; // 查找失败，返回 0
}

Status ListInsert_Sq(SqList *L, int i, Book e) { // 算法2.4 顺序表的插入
    // 在顺序表 L 中第 i 个位置之前插入新的元素 e
    // i 值的合法范围是 1<=i<=L.length+1
    if (i < 1 || i > L->length + 1) return ERROR; // i 值不合法
    if (L->length == MAXSIZE) return ERROR; // 当前存储空间已满
    int j;
    for (j = L->length - 1; j >= i - 1; j--) L->elem[j + 1] = L->elem[j];
    L->elem[i - 1] = e;
    ++L->length;
    return OK;
}

Status ListDelete_Sq(SqList *L, int i) { // 算法2.5 顺序表的删除
    // 在顺序表 L 中删除第 i 个元素，并用 e 返回其值
    // i 值的合法范围是 1<=i<=L.length
    if (i < 1 || i > L->length) return ERROR; // i 值不合法
    int j;
    for (j = i; j < L->length; j++) L->elem[j - 1] = L->elem[j];
    --L->length;
    return OK;
}
int main() {
    SqList L;
    int i = 0, temp, choose;
    double price;
    Book e;
    printf("1.建立\n");
    printf("2.输入\n");
    printf("3.取值\n");
    printf("4.查找\n");
    printf("5.插入\n");
    printf("6.删除\n");
    printf("7.输出\n");
    printf("0.退出\n");

    choose = -1;
    while (choose != 0) {
        printf("请选择：");
        scanf("%d", &choose);
        switch (choose) {
            case 1: // 创建顺序表
                if (InitList_Sq(&L))
                    printf("成功建立顺序表\n\n");
                else
                    printf("建立顺序表失败\n\n");
                break;
            case 2: // 输入顺序表元素
                printf("请输入元素个数：");
                scanf("%d", &L.length);
                printf("请依次输入各元素的 id, name, price：\n");
                for (i = 0; i < L.length; i++) {
                    scanf("%d %s %lf", &L.elem[i].id, L.elem[i].name, &L.elem[i].price);
                }
                break;
            case 3: // 顺序表的取值
                printf("请输入一个位置用来取值：\n");
                scanf("%d", &i);
                temp = GetElem(L, i, &e);
                if (temp != 0) {
                    printf("查找成功\n");
                    printf("第%d本图书的信息是：\n", i);
                    printf("%-15d%-50s%-5.2f\n\n", e.id, e.name, e.price);
                } else
                    printf("查找失败！位置超出范围\n\n");
                break;
            case 4: // 顺序表的查找
                printf("请输入所要查找价格：");
                scanf("%lf", &price);
                temp = LocateElem_Sq(L, price);
                if (temp != 0) {
                    printf("查找成功\n");
                    printf("该价格对应的书名为：%s\n\n", L.elem[temp - 1].name);
                } else
                    printf("查找失败！没有这个价格对应的书籍\n\n");
                break;
            case 5: // 顺序表的插入
                printf("请输入插入的位置和书本信息，包括：编号 书名 价格（用空格隔开）:");
                scanf("%d %d %s %lf", &i, &e.id, e.name, &e.price);
                if (ListInsert_Sq(&L, i, e))
                    printf("插入成功\n\n");
                else
                    printf("插入失败\n\n");
                break;
            case 6: // 顺序表的删除
                printf("请输入所要删除的书籍的位置:");
                scanf("%d", &i);
                if (ListDelete_Sq(&L, i))
                    printf("删除成功\n\n");
                else
                    printf("删除失败\n\n");
                break;
            case 7: // 顺序表的输出
                printf("当前图书系统信息（顺序表）读出:\n");
                for (i = 0; i < L.length; i++)
                    printf("id:%d name:%s price:%.2f\n", L.elem[i].id, L.elem[i].name, L.elem[i].price);
                printf("\n");
                break;
            default:
                break;
        }
    }
    return 0;
}
